services:
  front-end:
    profiles: ["full"]
    container_name: front-end
    build:
      context: ..\front-end
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      AUTH_URL: ${AUTH_URL}
      AUTH_SIGNOUT_URL: ${AUTH_SIGNOUT_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_ISSUER: ${KEYCLOAK_ISSUER}
      KEYCLOAK_END_SESSION_ENDPOINT: ${KEYCLOAK_END_SESSION_ENDPOINT}
    ports:
      - 3000:3000
    depends_on:
      - api-gateway
      - keycloak
    networks:
      - frontend_net
      - keycloak_net

  api-gateway:
    profiles: ["full", "backend"]
    hostname: api-gateway
    container_name: api-gateway
    build:
      context: ..\api-gateway
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
    ports:
      - 7200:8080
      - 7201:8081
    depends_on:
      - whiteboard-service
      - session-handler
      - document-store
    networks:
      - frontend_net
      - api_net

  whiteboard-service:
    profiles: ["full", "backend"]
    hostname: whiteboard-service
    container_name: whiteboard-service
    build:
      context: ..\whiteboard-service
      dockerfile: Dockerfile
    ports:
      - 7210:80
    environment:
      - ConnectionStrings__Npgsql=${WB_CONNECTION_STRING}
      - ConnectionStrings__RabbitMQ=${RB_CONNECTION_STRING}
      - RabbitMQ__HostName=${RABBIT_HOST}
      - RabbitMQ__Port=${RABBIT_PORT}
      - RabbitMQ__UserName=${RABBIT_USER}
      - RabbitMQ__Password=${RABBIT_PASS}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwks__Url=${JWKS_URL}
    depends_on:
      whiteboard-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - whiteboard_net
      - keycloak_net
      - api_net
      - rabbitmq_net

  whiteboard-db:
    profiles: ["full", "backend", "dev"]
    container_name: whiteboard-db
    image: postgres:latest
    environment:
      POSTGRES_DB: ${WB_DB}
      POSTGRES_USER: ${WB_USERNAME}
      POSTGRES_PASSWORD: ${WB_PASSWORD}
    ports:
      - 7215:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - whiteboard-db-data:/var/lib/postgresql/data
      - ./config/whiteboard/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - whiteboard_net

  session-handler:
    profiles: ["full", "backend"]
    container_name: session-handler
    build:
      context: ..\session-handler
      dockerfile: Dockerfile
    ports:
      - 7220:8080
      - 7221:8081
    depends_on:
      session-redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - session_net
      - api_net
      - rabbitmq_net

  session-redis:
    profiles: ["full", "backend", "dev"]
    container_name: session-redis
    image: redis/redis-stack:latest
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PW}
    ports:
      - 7225:6379
      - 8001:8001
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    volumes:
      - session-redis-data:/data
    networks:
      - session_net

  document-store:
    profiles: ["full", "backend"]
    container_name: document-store
    build:
      context: ..\document-store
      dockerfile: Dockerfile
    environment:
      - ConnectionStrings__CosmosDB=${DS_CONNECTION_STRING}
      - CosmosDB__DatabaseName=${DS_DB_NAME}
      - CosmosDB__ContainerName=${DS_CN_NAME}
      - ConnectionStrings__RabbitMQ=${RB_CONNECTION_STRING}
    ports:
      - 7230:80
    depends_on: 
      rabbitmq:
        condition: service_healthy
    networks:
      - api_net
      - document_net
      - rabbitmq_net

  keycloak:
    profiles: ["full", "backend", "dev"]
    hostname: keycloak
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: -v start-dev --import-realm
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - 7290:8080
    volumes:
      - ./config/keycloak:/opt/keycloak/data/import
      - keycloak-db-data:/opt/jboss/keycloak/standalone/data
    depends_on:
      - keycloak-db
    networks:
      - keycloak_net
      - api_net
      - frontend_net

  keycloak-db:
    profiles: ["full", "backend", "dev"]
    container_name: keycloak-db
    image: postgres:latest
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_PASSWORD: postgres
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready --username=postgres --dbname=keycloak"]
        interval: 5s
        timeout: 5s
        retries: 3
    networks:
      - keycloak_net

  rabbitmq:
    profiles: ["full", "backend", "dev"]
    container_name: rabbitmq
    hostname: cloudbord
    image: masstransit/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    volumes:
      - ./config/rabbitmq/data/:/var/lib/rabbitmq/
      - ./config/rabbitmq/log/:/var/log/rabbitmq
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - rabbitmq_net

networks:
  frontend_net:
    driver: bridge
  api_net:
    driver: bridge
  whiteboard_net:
    driver: bridge
  session_net:
    driver: bridge
  keycloak_net:
    driver: bridge
  rabbitmq_net:
    driver: bridge
  document_net:
    driver: bridge

volumes:
  keycloak-db-data:
  whiteboard-db-data:
  session-db-data:
  session-redis-data:
  rabbitmq-data: